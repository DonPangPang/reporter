<MCard OnClick="HandleItemDetail" class="re-task-item" Elevation="5" Color="@(_disabled ? "grey":"white")" Ripple
   >
    @* <MCardText>
        <MRow class="re-cbx">
        <MCol Sm="1" Align="AlignTypes.Center">
            <MCheckbox class="re-cbx" OnIcon="mdi mdi-radiobox-marked" OffIcon="mdi mdi-radiobox-blank" @bind-Value="Work.Status" TrueValue="WorkStatus.Finished" FalseValue="WorkStatus.Working"
        OnClick="()=>{}"></MCheckbox>
        </MCol>
        <MCol Sm="10" Align="AlignTypes.Center">
            @Work.Content
        </MCol>
    </MRow>
    </MCardText> *@
    <MCardText>
        <CheckBox Checked="@isFinished"></CheckBox>
    </MCardText>
</MCard>

<PDrawer Width="500" @bind-Value="visable"
    OnCancel="()=>visable = false">
    <ChildContent>
        Content
    </ChildContent>
</PDrawer>


<style>
    .re-task-item{
        margin-top: 15px;
    }

    .re-task-item .re-cbx > *{
        @* float: left; *@
        @* background-color:red; *@
        margin-left: 10px;
    }
</style>

@code {

    bool isFinished => Work.Status == WorkStatus.Finished;

    [Parameter]
    public Work Work { get; set; } = new();

    [Parameter]
    public EventCallback OnClick{get; set;}
    string DateRange => $"{Work.StartTime:yyyy-MM-dd HH:mm}-{Work.EndTime:yyyy-MM-dd HH:mm}";

    bool _disabled = false;

    void HandleStatus()
    {
        Work.Status = isFinished ? WorkStatus.Working : WorkStatus.Finished;
        @* _disabled = !_disabled;

        if(!_disabled)
            Enabled();
        else
            Disabled();


        StateHasChanged(); *@
        Refresh();
    }

    bool visable = false;

    void HandleItemDetail()
    {
        visable = true;
    }

    void Refresh(){
        StateHasChanged();
    }
}
